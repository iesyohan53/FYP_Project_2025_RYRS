//======================================================================================================================================================================
//																Final Year project group number 20
//======================================================================================================================================================================

//#set dateformat=US

//Some items used by the simulation - these set an "exit deltamode convergence"

#define rotor_convergence=0.01

//Deltamode declarations - global values - these have reasonable defaults, this is just to show how to manipulate them
#set deltamode_timestep=60000000000000	//100 ms
#set deltamode_maximumtime=86400000000000	// 24 hours



clock {
	timezone "PST+8PDT";				//Moved this first in the clock block, otherwise it causes issues
    timestamp '2025-01-01 00:00:00';
    stoptime '2025-01-02 00:00:00';		//Shortened the run-time, just because I didn't want to wait as long
}


module tape;
module climate;
module residential{
	implicit_enduses NONE;
};


module powerflow {

	enable_subsecond_models true;	//Enables deltamode for the powerflow module
	deltamode_timestep 5.0 ms;		//Good timestep value for electromechanical diesels
	solver_method NR;				//NR MUST be used for deltamode, otherwise it won't work
	all_powerflow_delta true;		//Saves having to put "flags DELTAMODE;" on every powerflow object
	default_maximum_voltage_error 1e-12;
		
	line_limits FALSE;
	default_maximum_voltage_error 1e-9;

	NR_iteration_limit 50;
    NR_deltamode_iteration_limit 25;
    enable_frequency_dependence true;


}
module generators {
	enable_subsecond_models true;	//Enables deltamode for generator module
	deltamode_timestep 10.0 ms;	//Desired timestep for the generator module models
}
//======================================================================================================================================================================
//																		    main Swing node
//======================================================================================================================================================================
/// main node(node001)//
object node {      
	name node001;		
	bustype SWING;       
	phases ABCN;     
	nominal_voltage 230.94;     
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_001.csv;
		interval 1;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		limit 100000000000;
		property voltage_A,voltage_B,voltage_C,voltage_AB,voltage_BC,voltage_CA,current_A,current_B,current_C,power_A,power_B,power_C,measured_angle_A,measured_frequency_A,measured_angle_B,measured_frequency_B,measured_angle_C,measured_frequency_C,measured_frequency;
	};    
}  

//======================================================================================================================================================================
//																		    main Swing node end
//======================================================================================================================================================================

//======================================================================================================================================================================
//																		    over head line declarations
//======================================================================================================================================================================
// Line definition

object line_spacing {
    name line_spacing_200;
    distance_AB 2.5;
    distance_BC 4.5;
    distance_AC 7.0;
    distance_AN 5.656854;
    distance_BN 4.272002;
    distance_CN 5.0;
}

object overhead_line_conductor {
	name overhead_line_conductor_100;
	geometric_mean_radius 0.0244;
	resistance 0.306;
}

object overhead_line_conductor {
	name overhead_line_conductor_101;
	geometric_mean_radius 0.00814;
	resistance 0.592;
}

object line_configuration {
    name line_config_A;
    conductor_A overhead_line_conductor_100;
    conductor_B overhead_line_conductor_100;
    conductor_C overhead_line_conductor_100;
    conductor_N overhead_line_conductor_101;
    spacing line_spacing_200;
}

//======================================================================================================================================================================
//																		over head line declarations end
//======================================================================================================================================================================
//======================================================================================================================================================================
//																		        Climate File 
//======================================================================================================================================================================

object climate {
	name "Spokane WA";
	tmyfile "./WA-Spokane-727850.tmy3"; 
	interpolate LINEAR;
}
//======================================================================================================================================================================
//																		        Climate File end 
//======================================================================================================================================================================

//======================================================================================================================================================================
//																		      Diesel generator
//======================================================================================================================================================================
// Generator 

object diesel_dg {
    name DIESEL_1;
    parent node001;
    flags DELTAMODE;
    Rated_V 400.00;
    Rated_VA 2 MVA;
    
    Gen_type DYN_SYNCHRONOUS;
    rotor_speed_convergence ${rotor_convergence};
    
    // Set realistic initial power output
    power_out_A 80000.0;
    power_out_B 80000.0;
    power_out_C 80000.0;
    
    // Generator mechanical parameters
    inertia 8.0;           // Inertia constant (seconds)
    damping 2.0;        // Damping coefficient
    omega_ref 376.99;        // Reference frequency (Hz)
    
    // Exciter configuration (SEXS type)
	// Add SEXS Exciter for voltage regulation
    Exciter_type SEXS;
    KA 200;                // Exciter gain
    TA 0.02;               // Exciter time constant
    TB 0.1;                // Exciter time constant
    TC 0.1;                // Exciter time constant
    EMAX 5.0;              // Maximum exciter output
    EMIN -5.0;  
    
	// Improved Governor with controls
    Governor_type DEGOV1;
	DEGOV1_R 0.05;         // Governor droop constant (p.u.)
    DEGOV1_T1 0.5;         // Governor electric control box time constant (s)
    DEGOV1_T2 0.1;         // Governor electric control box time constant (s)
    DEGOV1_T3 0.01;        // Governor electric control box time constant (s)
   // DEGOV1_T4 0.0;         // Governor actuator time constant (s)
   // DEGOV1_T5 0.0;         // Governor actuator time constant (s)
   // DEGOV1_T6 0.0;         // Governor actuator time constant (s)
   // DEGOV1_K 1.0;          // Governor actuator gain
    DEGOV1_TMAX 0.23;      // Governor actuator upper limit (p.u.)
    DEGOV1_TMIN 0.0;       // Governor actuator lower limit (p.u.)
   // DEGOV1_TD 0.0;         // Governor combustion delay (s)

}
object recorder {
    parent DIESEL_1;
    name diesel_power_recorder;
    property pwr_electric.real,pwr_electric.imag,pwr_mech;
    flags DELTAMODE;
    interval 1;  // Record every second
    file "diesel_generator_power.csv";
}

//===================================================================================================================================================================
//																		 Diesel generator end
//===================================================================================================================================================================

//===================================================================================================================================================================
//																		       Solar
//===================================================================================================================================================================

//===================================================================== Solar overhead_line========================================================================//

object overhead_line {
	name ovl_solar_connector1_S1;
	phases "ABCN";
	from solar_m1;
	to node20;
	length 20;
	configuration line_config_A;
}


object overhead_line {
	name ovl_solar_connector1_S2;
	phases "ABCN";
	from solar_m2;
	to node52;
	length 20;
	configuration line_config_A;
}

object overhead_line {
	name ovl_solar_connector1_S3;
	phases "ABCN";
	from solar_m3;
	to node86;
	length 20;
	configuration line_config_A;
}

//==================================================================== Solar overhead_line end==============================================================//

//================================================================ Solar meters================================================================//

object meter {     
      name solar_m1;     
      phases ABCN;     
      nominal_voltage 230.94; 
	  bustype PQ;      
}  
object meter {     
      name solar_m2;     
      phases ABCN;     
      nominal_voltage 230.94;
	  bustype PQ;         
}  
object meter {     
      name solar_m3;     
      phases ABCN;     
      nominal_voltage 230.94;
	  bustype PQ;         
}

//================================================================ Solar meters end ================================================================//

//================================================================ Solar inverters================================================================//

object inverter {
	name solar_inv_01;
	phases ABCN;
	parent solar_m1;
	generator_status ONLINE;
	inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode CONSTANT_PF;
    generator_mode SUPPLY_DRIVEN;
    inverter_efficiency .95;
	rated_power 200000;

}
object inverter {
	name solar_inv_02;
	phases ABCN;
	parent solar_m2;
	generator_status ONLINE;
	inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode CONSTANT_PF;
    generator_mode SUPPLY_DRIVEN;
    inverter_efficiency .95;
	rated_power 200000;

}
object inverter {
	name solar_inv_03;
	phases ABCN;
	parent solar_m3;
	generator_status ONLINE;
	inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode CONSTANT_PF;
    generator_mode SUPPLY_DRIVEN;
    inverter_efficiency .95;
	rated_power 200000;

}

//================================================================ Solar inverters end ================================================================//

//================================================================ Solar objects================================================================//

object solar {
    name F1_solar;
    parent solar_inv_01;
    panel_type SINGLE_CRYSTAL_SILICON;
    area 4000 ft^2;
    tilt_angle 47.0;
    efficiency 0.165;
    orientation_azimuth 270;          // West-facing (270°)
    orientation FIXED_AXIS;
    SOLAR_TILT_MODEL SOLPOS;
    SOLAR_POWER_MODEL FLATPLATE;
}
object solar {
    name F2_solar;
    parent solar_inv_02;
    panel_type SINGLE_CRYSTAL_SILICON;
    area 4000 ft^2;
    tilt_angle 47.0;
    efficiency 0.165;
    orientation_azimuth 270;          // West-facing (270°)
    orientation FIXED_AXIS;
    SOLAR_TILT_MODEL SOLPOS;
    SOLAR_POWER_MODEL FLATPLATE;
}
object solar {
    name F3_solar;
    parent solar_inv_03;
    panel_type SINGLE_CRYSTAL_SILICON;
    area 4000 ft^2;
    tilt_angle 47.0;
    efficiency 0.165;
    orientation_azimuth 270;          // West-facing (270°)
    orientation FIXED_AXIS;
    SOLAR_TILT_MODEL SOLPOS;
    SOLAR_POWER_MODEL FLATPLATE;
}
//================================================================ Solar objects ends================================================================//

//================================================================ SOLAR INVERTER POWER RECORDERS================================================================//
// Solar Inverter 1 Power Recorder
object recorder {
    parent solar_inv_01;
    name solar_inv_01_power_recorder;
    property P_Out,power_factor;
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_inverter_01_power.csv";
}

// Solar Inverter 2 Power Recorder
object recorder {
    parent solar_inv_02;
    name solar_inv_02_power_recorder;
    property P_Out,power_factor;
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_inverter_02_power.csv";
}

// Solar Inverter 3 Power Recorder
object recorder {
    parent solar_inv_03;
    name solar_inv_03_power_recorder;
    property P_Out,power_factor;
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_inverter_03_power.csv";
}


// Solar Panel 1 Power Recorder
object recorder {
    parent F1_solar;
    name solar_panel_01_recorder;
    property "P_Out,V_Out,I_Out";
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_panel_01_power.csv";
}

// Solar Panel 2 Power Recorder
object recorder {
    parent F2_solar;
    name solar_panel_02_recorder;
    property "P_Out,V_Out,I_Out";
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_panel_02_power.csv";
}

// Solar Panel 3 Power Recorder
object recorder {
    parent F3_solar;
    name solar_panel_03_recorder;
    property "P_Out,V_Out,I_Out";
    flags DELTAMODE;
    interval 60;  // Record every minute
    file "solar_panel_03_power.csv";
}

//================================================================ SOLAR INVERTER POWER RECORDERS end================================================================//

//===================================================================================================================================================================
//																		       Solar end
//===================================================================================================================================================================

//===================================================================================================================================================================
//																		       Wind
//===================================================================================================================================================================


///#set profiler=1;
#set double_format=%+.12lg
#set randomseed=10;
#set relax_naming_rules=1;
module assert;
module generators {
	enable_subsecond_models true;	//Enables deltamode for generator module
	deltamode_timestep 1000.0 ms;	//Desired timestep for the generator module models
}


//================================================================ Wind meters================================================================//

object meter {
	name my_meterw1;
	frequency_measure_type PLL;
	phases ABCN;
	nominal_voltage 230.94;
}

//================================================================ Wind meters end ================================================================//
// turbine
object windturb_dg {
    parent my_meterw1;
    phases ABCN;
    name windturb2_100kW_alt;
    Gen_status ONLINE;
    Gen_type SYNCHRONOUS;
    Gen_mode CONSTANTP;
    Turbine_Model GENERIC_SYNCH_LARGE;
    Rated_V 400;
    
    // Scale the turbine for 100kW output
    turbine_height 80;
    blade_diam 35;
    Cp_max 0.45;
    cut_in_ws 2.5;
    cut_out_ws 25;
    ws_rated 6.1;
}


// over head  lines

object overhead_line {
	name ovl_w11;
	phases "ABCN";
	from my_meterw1;
	to node8;
	length 2000;
	configuration line_config_A;
}

//================================================================ Wind recoders ================================================================//

object recorder {
    parent windturb2_100kW_alt;
    name turb_power_output;
    property voltage_A,voltage_B,voltage_C,current_A,current_B,current_C,power_A.real,power_B.real,power_C.real;
    interval 60; // log every 60 seconds
    file "turbine_power_output.csv";
}

// Voltage output recorder (in volts)
object recorder {
    parent windturb2_100kW_alt;
    name turb_voltage_output;
    property voltage_A,voltage_B,voltage_C,current_A,current_B,current_C,power_A.real,power_B.real,power_C.real;
    interval 60; // log every 60 seconds
    file "turbine_voltage_output.csv";
}

//================================================================ Wind recoders end  ================================================================//

//===================================================================================================================================================================
//																		       Wind end
//===================================================================================================================================================================


//===================================================================================================================================================================
//																		       Battery
//===================================================================================================================================================================

//================================================================ BAttery meters================================================================//
object meter {     
      name batt_m1;     
      phases ABCN;     
      nominal_voltage 230.94;         
}
//================================================================ BAttery meters end================================================================//
///// inverter
object inverter {
    name batt_inv;
    generator_status ONLINE;
    inverter_type FOUR_QUADRANT;
    four_quadrant_control_mode CONSTANT_PQ;
    parent batt_m1;
    rated_power 100000;  // 100kW per phase = 300kW total
    inverter_efficiency .95;

    max_discharge_rate 300.0 kW;
    max_charge_rate 300.0 kW;
    V_base 230.94;
    
     object player {
        property P_Out;
        file charge.csv;
    };
}

object battery {
    name battery_bank;
    parent batt_inv;
    use_internal_battery_model TRUE;
    battery_type LI_ION;
    Energy 1720 kWh;
    nominal_voltage 230.94;  // Match system
    battery_capacity 1720 kWh;
    round_trip_efficiency 0.85;
    state_of_charge 0.3;
    generator_mode CONSTANT_PQ;  // Match inverter
}

object recorder {
    parent battery_bank;
    property state_of_charge;
    interval 60;  // Record every 60 seconds
    file "battery_soc.csv";
}

///// over head lines
object overhead_line {
	name ovl_battery_connector1;
	phases "ABCN";
	from batt_m1;
	to node35;
	length 20;
	configuration line_config_A;
}


object recorder {
    parent batt_m1;
    name batteryrecorder;
    property voltage_A,voltage_B,voltage_C,current_A,current_B,current_C,power_A.real,power_B.real,power_C.real;
    interval 60; // log every 60 seconds
    file "battery.csv";
}

object recorder {
    parent ovl_battery_connector1;
    name batteryrecorder2;
    property current_in_A,current_in_B,current_in_C,power_in_A.real,power_in_B.real,power_in_C.real;
    interval 60; // log every 60 seconds
    file "battery_S1.csv";
}


//===================================================================================================================================================================
//																		       Battery end
//===================================================================================================================================================================


//===================================================================================================================================================================
//																		       Nodes
//===================================================================================================================================================================

// Feeder 01
// Node 01-10

object node {
	name node1;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}
object node {
	name node2;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}
object node {
	name node3;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}
object node {
	name node4;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node5;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node6;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node7;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node8;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node9;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node10;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}
// node 11-20
object node {
	name node11;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node12;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node13;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node14;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node15;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node16;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node17;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node18;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node19;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node20;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_20_CRITICAL_NODE_Data.csv;
		interval 60;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		property voltage_A,voltage_B,voltage_C;
	}; 
}
// node 21-30
object node {
	name node21;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node22;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node23;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node24;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node25;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node26;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node27;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node28;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node29;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node30;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}
// node 31-34
object node {
	name node31;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node32;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node33;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}

object node {
	name node34;
	phases "ABCN";
	frequency_measure_type PLL;
	nominal_voltage 230.94;
}


// Feeder 02

//Node 35-45

object node {
	name node35;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node36;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node37;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node38;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node39;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node40;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node41;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node42;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node43;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node44;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node45;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

//Node 46-55

object node {
    name node46;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node47;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}


object node {
    name node48;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node49;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node50;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node51;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node52;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_52_CRITICAL_NODE_Data.csv;
		interval 60;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		property voltage_A,voltage_B,voltage_C;
	}; 
}

object node {
    name node53;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node54;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node55;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

//Node 55-62

object node {
    name node56;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node57;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node58;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node59;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node60;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node61;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}

object node {
    name node62;
    phases "ABCN";
	frequency_measure_type PLL;
    nominal_voltage 230.94;
}


// Feeder 03


object node {
    name node63;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node64;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node65;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node66;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node67;
    phases "ABCN";    
    frequency_measure_type PLL;
	nominal_voltage 230.94;
    
}
object node {
    name node68;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node69;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node70;
    phases "ABCN";    
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node71;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node72;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node73;
    phases "ABCN";
    frequency_measure_type PLL;
	nominal_voltage 230.94;
    
}
object node {
    name node74;
    phases "ABCN";  
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node75;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node76;
    phases "ABCN";    
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node77;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node78;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node79;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node80;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node81;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node82;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_82_CRITICAL_NODE_Data.csv;
		interval 60;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		property voltage_A,voltage_B,voltage_C;
	}; 
    
}
object node {
    name node83;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node84;
    phases "ABCN";  
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node85;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node86;
    phases "ABCN";   
    frequency_measure_type PLL;
    nominal_voltage 230.94;

	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_86_CRITICAL_NODE_Data.csv;
		interval 60;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		property voltage_A,voltage_B,voltage_C;
	}; 
    
}
object node {
    name node87;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node88;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node89;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node90;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node91;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node92;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node93;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node94;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node95;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node96;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node97;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node98;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node99;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node100;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node101;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node102;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node103;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node104;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node105;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node106;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node107;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node108;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node109;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node110;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node111;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}
object node {
    name node112;
    phases "ABCN";
    frequency_measure_type PLL;
	nominal_voltage 230.94;
    
}
object node {
    name node113;
    phases "ABCN";
    frequency_measure_type PLL;
    nominal_voltage 230.94;
    
}


//===================================================================================================================================================================
//																		       Nodes end
//===================================================================================================================================================================




//===================================================================================================================================================================
//																		       Load Files
//===================================================================================================================================================================

// feeder 01 loads

// Load 2
object load {
    name LOAD_2; 	// name of Load
    parent node2; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_02_A.csv; //Scv file name phase A
	};
} 
// Load 4
object load {
    name LOAD_4; 	// name of Load
    parent node4; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_04_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_04_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_04_C.csv; //Scv file name phase C
	};
} 
// Load 5
object load {
    name LOAD_5; 	// name of Load
    parent node5; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_05_C.csv; //Scv file name phase C
	};
} 
// Load 6
object load {
    name LOAD_6; 	// name of Load
    parent node6; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_06_C.csv; //Scv file name phase C
	};
} 
// Load 7
object load {
    name LOAD_7; 	// name of Load
    parent node7; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_07_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_07_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_07_C.csv; //Scv file name phase C
	};
} 
// Load 9
object load {
    name LOAD_9; 	// name of Load
    parent node9; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_09_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_09_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_09_C.csv; //Scv file name phase C
	};
}
// Load 10
object load {
    name LOAD_10; 	// name of Load
    parent node10; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_10_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_10_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_10_C.csv; //Scv file name phase C
	};
}
// Load 11
object load {
    name LOAD_11; 	// name of Load
    parent node11; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_11_C.csv; //Scv file name phase C
	};
}
// Load 12
object load {
    name LOAD_12; 	// name of Load
    parent node12; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_12_A.csv; //Scv file name phase A
	};
}
// Load 13
object load {
    name LOAD_13; 	// name of Load
    parent node13; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_13_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_13_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_13_C.csv; //Scv file name phase C
	};
}
// Load 14
object load {
    name LOAD_14; 	// name of Load
    parent node14; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_14_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_14_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_14_C.csv; //Scv file name phase C
	};
}
// Load 15
object load {
    name LOAD_15; 	// name of Load
    parent node15; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_15_A.csv; //Scv file name phase A
	};
}
// Load 16
object load {
    name LOAD_16; 	// name of Load
    parent node16; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_16_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_16_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_16_C.csv; //Scv file name phase C
	};
}
// Load 17
object load {
    name LOAD_17; 	// name of Load
    parent node17; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_17_C.csv; //Scv file name phase C
	};
}
// Load 18
object load {
    name LOAD_18; 	// name of Load
    parent node18; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_18_A.csv; //Scv file name phase A
	};
}
// Load 19
object load {
    name LOAD_19; 	// name of Load
    parent node19; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_19_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_19_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_19_C.csv; //Scv file name phase C
	};
}
// Load 22
object load {
    name LOAD_22; 	// name of Load
    parent node22; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_22_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_22_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_22_C.csv; //Scv file name phase C
	};
}
// Load 23
object load {
    name LOAD_23; 	// name of Load
    parent node23; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_23_C.csv; //Scv file name phase C
	};
}
// Load 24
object load {
    name LOAD_24; 	// name of Load
    parent node24; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_24_C.csv; //Scv file name phase C
	};
}
// Load 25
object load {
    name LOAD_25; 	// name of Load
    parent node25; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_25_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_25_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_25_C.csv; //Scv file name phase C
	};
}
// Load 26
object load {
    name LOAD_26; 	// name of Load
    parent node26; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_26_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_26_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_26_C.csv; //Scv file name phase C
	};
}
// Load 27
object load {
    name LOAD_27; 	// name of Load
    parent node27; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_27_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_27_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_27_C.csv; //Scv file name phase C
	};
}
// Load 29
object load {
    name LOAD_29; 	// name of Load
    parent node29; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_29_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_29_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_29_C.csv; //Scv file name phase C
	};
}
// Load 30
object load {
    name LOAD_30; 	// name of Load
    parent node30; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_30_B.csv; //Scv file name phase B
	};
}
// Load 31
object load {
    name LOAD_31; 	// name of Load
    parent node31; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_31_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_31_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_31_C.csv; //Scv file name phase C
	};
}
// Load 32
object load {
    name LOAD_32; 	// name of Load
    parent node32; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_32_C.csv; //Scv file name phase C
	};
}
// Load 33
object load {
    name LOAD_33; 	// name of Load
    parent node33; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_33_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_33_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_33_C.csv; //Scv file name phase C
	};
}
// Load 34
object load {
    name LOAD_34; 	// name of Load
    parent node34; // parent node eka
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_34_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_34_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_34_C.csv; //Scv file name phase C
	};
}


// Feeder 02 loads

object load {
    name LOAD_36; 	// name of Load
    parent node36; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_36_A.csv; //Scv file name phase A
	};

	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_36_B.csv; //Scv file name phase A
	};

	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_36_C.csv; //Scv file name phase A
	};
} 

object load {
    name LOAD_37; 	// name of Load
    parent node37; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything

	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_37_C.csv; //Scv file name phase C
	};
} 

object load {
    name LOAD_38; 	// name of Load
    parent node38; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_38_A.csv; //Scv file name phase A
	};
} 

object load {
    name LOAD_39; 	// name of Load
    parent node39; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_39_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_39_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_39_C.csv; //Scv file name phase C
	};
} 

object load {
    name LOAD_40; 	// name of Load
    parent node40; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_40_B.csv; //Scv file name phase B
	};
} 

object load {
    name LOAD_42; 	// name of Load
    parent node42; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_42_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_42_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_42_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_43; 	// name of Load
    parent node43; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_43_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_43_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_43_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_44; 	// name of Load
    parent node44; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_44_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_44_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_44_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_46; 	// name of Load
    parent node46; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_46_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_46_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_46_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_47; 	// name of Load
    parent node47; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_47_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_47_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_47_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_49; 	// name of Load
    parent node49; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_49_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_49_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_49_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_50; 	// name of Load
    parent node50; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_50_B.csv; //Scv file name phase B
	};
}

object load {
    name LOAD_51; 	// name of Load
    parent node51; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_51_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_51_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_51_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_53; 	// name of Load
    parent node53; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_53_A.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_54; 	// name of Load
    parent node54; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_54_C.csv; //Scv file name phase A
	};
}

object load {
    name LOAD_55; 	// name of Load
    parent node55; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_55_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_55_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_55_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_57; 	// name of Load
    parent node57; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_57_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_57_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_57_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_58; 	// name of Load
    parent node58; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_58_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_58_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_58_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_59; 	// name of Load
    parent node59; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_59_B.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_60; 	// name of Load
    parent node60; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_60_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_60_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_60_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_61; 	// name of Load
    parent node61; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_61_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_62; 	// name of Load
    parent node62; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_62_C.csv; //Scv file name phase C
	};
}


// feeder 03 loads

object load {
    name LOAD_63; 	// name of Load
    parent node63; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_63_B.csv; //Scv file name phase A
	};
} 

object load {
    name LOAD_64; 	// name of Load
    parent node64; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_64_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_64_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_64_C.csv; //Scv file name phase C
	};
} 

object load {
    name LOAD_65; 	// name of Load
    parent node65; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_65_A.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_65_B.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_65_C.csv; //Scv file name phase C
	};
} 

object load {
    name LOAD_66; 	// name of Load
    parent node66; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_66_C.csv; //Scv file name phase C
	};
} 

object load {
    name LOAD_67; 	// name of Load
    parent node67; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_67_B.csv; //Scv file name phase B
	};
} 

object load {
    name LOAD_68; 	// name of Load
    parent node68; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_68_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_69; 	// name of Load
    parent node69; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_69_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_70; 	// name of Load
    parent node70; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_70_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_72; 	// name of Load
    parent node72; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_72_C.csv; //Scv file name phase A
	};
}

object load {
    name LOAD_73; 	// name of Load
    parent node73; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_73_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_74; 	// name of Load
    parent node74; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_74_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_75; 	// name of Load
    parent node75; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_75_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_75_B.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_75_C.csv; //Scv file name phase A
	};
}


object load {
    name LOAD_76; 	// name of Load
    parent node76; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_76_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_78; 	// name of Load
    parent node78; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_78_A.csv; //Scv file name phase A
	};
}

object load {
    name LOAD_79; 	// name of Load
    parent node79; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_79_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_80; 	// name of Load
    parent node80; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_80_A.csv; //Scv file name phase A
	};
}

object load {
    name LOAD_81; 	// name of Load
    parent node81; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_81_A.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_81_B.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_81_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_82; 	// name of Load
    parent node82; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_82_A.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_82_B.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_82_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_83; 	// name of Load
    parent node83; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_83_A.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_83_B.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_83_C.csv; //Scv file name phase C
	};
}
object load {
    name LOAD_84; 	// name of Load
    parent node84; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_84_A.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_84_B.csv; //Scv file name phase C
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_84_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_85; 	// name of Load
    parent node85; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_85_A.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_87; 	// name of Load
    parent node87; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_87_A.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_88; 	// name of Load
    parent node88; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_88_B.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_89; 	// name of Load
    parent node89; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_89_A.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_91; 	// name of Load
    parent node91; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_91_A.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_92; 	// name of Load
    parent node92; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_92_A.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_94; 	// name of Load
    parent node94; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_94_A.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_95; 	// name of Load
    parent node95; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_95_A.csv; //Scv file name phase A
	};
	
}

object load {
    name LOAD_96; 	// name of Load
    parent node96; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_96_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_96_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_96_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_97; 	// name of Load
    parent node97; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_97_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_97_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_97_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_98; 	// name of Load
    parent node98; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_98_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_98_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_98_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_99; 	// name of Load
    parent node99; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_99_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_99_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_99_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_100; 	// name of Load
    parent node100; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_100_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_100_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_100_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_101; 	// name of Load
    parent node101; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_101_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_101_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_101_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_102; 	// name of Load
    parent node102; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_102_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_102_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_102_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_103; 	// name of Load
    parent node103; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_103_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_103_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_103_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_104; 	// name of Load
    parent node104; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_104_C.csv; //Scv file name phase A
	};
}

object load {
    name LOAD_106; 	// name of Load
    parent node106; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_106_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_106_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_106_C.csv; //Scv file name phase C
	};
}


object load {
    name LOAD_107; 	// name of Load
    parent node107; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_107_B.csv; //Scv file name phase B
	};
	
}

object load {
    name LOAD_108; 	// name of Load
    parent node108; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_108_A.csv; //Scv file name phase B
	};
}

object load {
    name LOAD_109; 	// name of Load
    parent node109; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_109_A.csv; //Scv file name phase B
	};
}


object load {
    name LOAD_110; 	// name of Load
    parent node110; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_110_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_110_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_110_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_111; 	// name of Load
    parent node111; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_111_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_111_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_111_C.csv; //Scv file name phase C
	};
}

object load {
    name LOAD_113; 	// name of Load
    parent node113; // parent node eka
    phases ABCN;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 230.94;   
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file LOAD_113_A.csv; //Scv file name phase A
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file LOAD_113_B.csv; //Scv file name phase B
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file LOAD_113_C.csv; //Scv file name phase C
	};
}


//===================================================================================================================================================================
//																		       Load Files end 
//===================================================================================================================================================================


//===================================================================================================================================================================
//																		       Over head lines
//===================================================================================================================================================================



// feeder 01 lines

// line node 002 to node 1
object overhead_line {
    name line_001_to_1;
    phases ABC;
    from node001;
    to node1;
    length 7.1;
    configuration line_config_A;
};
object overhead_line {
	name ovl_12;
	phases "ABCN";
	from node1;
	to node2;
	length 7.17;
	configuration line_config_A;
};
object overhead_line {
	name ovl_23;
	phases "ABCN";
	from node2;
	to node3;
	length 8.91;
	configuration line_config_A;
};

object overhead_line {
	name ovl_34;
	phases "ABCN";
	from node3;
	to node4;
	length 17.8814;
	configuration line_config_A;
}

object overhead_line {
	name ovl_45;
	phases "ABCN";
	from node4;
	to node5;
	length 18.1395;
	configuration line_config_A;
}

object overhead_line {
	name ovl_56;
	phases "ABCN";
	from node5;
	to node6;
	length 22.6679;
	configuration line_config_A;
}

object overhead_line {
	name ovl_67;
	phases "ABCN";
	from node6;
	to node7;
	length 25.27;
	configuration line_config_A;
}

object overhead_line {
	name ovl_78;
	phases "ABCN";
	from node7;
	to node8;
	length 27.73;
	configuration line_config_A;
}

object overhead_line {
	name ovl_89;
	phases "ABCN";
	from node8;
	to node9;
	length 24.435;
	configuration line_config_A;
}

object overhead_line {
	name ovl_910;
	phases "ABCN";
	from node9;
	to node10;
	length 34.878;
	configuration line_config_A;
}
// lines from 10
object overhead_line {
	name ovl_1011;
	phases "ABCN";
	from node10;
	to node11;
	length 35.34;
	configuration line_config_A;
	}

object overhead_line {
	name ovl_1112;
	phases "ABCN";
	from node11;
	to node12;
	length 16.89;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1213;
	phases "ABCN";
	from node12;
	to node13;
	length 11.613;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1314;
	phases "ABCN";
	from node13;
	to node14;
	length 13.533;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1415;
	phases "ABCN";
	from node14;
	to node15;
	length 10.64;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1516;
	phases "ABCN";
	from node15;
	to node16;
	length 30.43;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1617;
	phases "ABCN";
	from node16;
	to node17;
	length 33.525;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1718;
	phases "ABCN";
	from node17;
	to node18;
	length 25.668;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1819;
	phases "ABCN";
	from node18;
	to node19;
	length 27.79;
	configuration line_config_A;
}

object overhead_line {
	name ovl_1920;
	phases "ABCN";
	from node19;
	to node20;
	length 30.828;
	configuration line_config_A;
};
// lines from 21
object overhead_line {
	name ovl_2021;
	phases "ABCN";
	from node20;
	to node21;
	length 6.032;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2122;
	phases "ABCN";
	from node21;
	to node22;
	length 26.748;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2223;
	phases "ABCN";
	from node22;
	to node23;
	length 23.15;
	configuration line_config_A;
	}

object overhead_line {
	name ovl_2024;
	phases "ABCN";
	from node20;
	to node24;
	length 25.24;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2425;
	phases "ABCN";
	from node24;
	to node25;
	length 10.726;
	configuration line_config_A;
}


object overhead_line {
	name ovl_2026;
	phases "ABCN";
	from node20;
	to node26;
	length 15.786;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2627;
	phases "ABCN";
	from node26;
	to node27;
	length 27.87;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2728;
	phases "ABCN";
	from node27;
	to node28;
	length 11.12;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2829;
	phases "ABCN";
	from node28;
	to node29;
	length  40.09;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2930;
	phases "ABCN";
	from node29;
	to node30;
	length 28.14;
	configuration line_config_A;
}

object overhead_line {
	name ovl_2931;
	phases "ABCN";
	from node29;
	to node31;
	length 29.16;
	configuration line_config_A;
}
// lines from 31 -34
object overhead_line {
	name ovl_3132;
	phases "ABCN";
	from node31;
	to node32;
	length 15.72;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3233;
	phases "ABCN";
	from node32;
	to node33;
	length 22.81;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3334;
	phases "ABCN";
	from node33;
	to node34;
	length 30.6257;
	configuration line_config_A;
}


//Feeder 2 lines

object overhead_line {
	name ovl_135;
	phases "ABCN";
	from node1;
	to node35;
	length 18.404;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3536;
	phases "ABCN";
	from node35;
	to node36;
	length 42.108;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3637;
	phases "ABCN";
	from node36;
	to node37;
	length 27.70;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3738;
	phases "ABCN";
	from node37;
	to node38;
	length 16.56;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3839;
	phases "ABCN";
	from node38;
	to node39;
	length 2.174;
	configuration line_config_A;
}

object overhead_line {
	name ovl_3640;
	phases "ABCN";
	from node36;
	to node40;
	length 31.45;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4041;
	phases "ABCN";
	from node40;
	to node41;
	length 36.768;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4142;
	phases "ABCN";
	from node41;
	to node42;
	length 21.168;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4243;
	phases "ABCN";
	from node42;
	to node43;
	length 33.396;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4144;
	phases "ABCN";
	from node41;
	to node44;
	length 39.519;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4445;
	phases "ABCN";
	from node44;
	to node45;
	length 23.67;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4546;
	phases "ABCN";
	from node45;
	to node46;
	length 14.52;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4647;
	phases "ABCN";
	from node46;
	to node47;
	length 22.77;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4048;
	phases "ABCN";
	from node40;
	to node48;
	length 35.51;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4849;
	phases "ABCN";
	from node48;
	to node49;
	length 34.05;
	configuration line_config_A;
}

object overhead_line {
	name ovl_4950;
	phases "ABCN";
	from node49;
	to node50;		
	length 32.94;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5051;
	phases "ABCN";
	from node50;
	to node51;
	length 10.63;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5152;
	phases "ABCN";
	from node51;
	to node52;
	length 40.92;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5253;
	phases "ABCN";
	from node52;
	to node53;
	length 10.749;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5354;
	phases "ABCN";
	from node53;
	to node54;
	length 17.30;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5455;
	phases "ABCN";
	from node54;
	to node55;
	length 19.72;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5256;
	phases "ABCN";
	from node52;
	to node56;
	length 15.37;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5657;
	phases "ABCN";
	from node56;
	to node57;
	length 21.074;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5758;
	phases "ABCN";
	from node57;
	to node58;
	length 18.974;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5859;
	phases "ABCN";
	from node58;
	to node59;	
	length 31.058;
	configuration line_config_A;
}

object overhead_line {
	name ovl_5960;
	phases "ABCN";
	from node59;
	to node60;
	length 18.44;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6061;
	phases "ABCN";
	from node60;
	to node61;
	length 23.104;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6162;
	phases "ABCN";
	from node61;
	to node62;
	length 14.416;
	configuration line_config_A;
}

// Feeder 03 lines


object overhead_line {
	name ovl_0163;
	phases "ABCN";
	from node1;
	to node63;
	length 20.45;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6364;
	phases "ABCN";
	from node63;
	to node64;
	length 30.45;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6465;
	phases "ABCN";
	from node64;
	to node65;
	length 33.83;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6566;
	phases "ABCN";
	from node65;
	to node66;	
	length 9.496;
	configuration line_config_A;
}



object overhead_line {
	name ovl_6667;
	phases "ABCN";
	from node66;
	to node67;
	length 14.66;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6768;
	phases "ABCN";
	from node67;
	to node68;
	length 16.41;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6869;
	phases "ABCN";
	from node68;
	to node69;
	length 15.14;
	configuration line_config_A;
}

object overhead_line {
	name ovl_6970;
	phases "ABCN";
	from node69;
	to node70;
	length 21.44;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7071;
	phases "ABCN";
	from node70;
	to node71;
	length 22.327;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7172;
	phases "ABCN";
	from node71;
	to node72;
	length 16.76;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7273;
	phases "ABCN";
	from node72;
	to node73;
	length 5.87;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7374;
	phases "ABCN";
	from node73;
	to node74;
	length 40.082;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7175;
	phases "ABCN";
	from node71;
	to node75;
	length 16.744;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7576;
	phases "ABCN";
	from node75;
	to node76;
	length 24.66;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7677;
	phases "ABCN";
	from node76;
	to node77;
	length 26.6528;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7778;
	phases "ABCN";
	from node77;
	to node78;
	length 23.7202;
	configuration line_config_A;
}
object overhead_line {
	name ovl_7879;
	phases "ABCN";
	from node78;
	to node79;
	length 25.49;
	configuration line_config_A;
}

object overhead_line {
	name ovl_7580;
	phases "ABCN";
	from node75;
	to node80;
	length 4.35;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8081;
	phases "ABCN";
	from node80;
	to node81;
	length 20.88;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8185;
	phases "ABCN";
	from node81;
	to node85;
	length 38.57;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8586;
	phases "ABCN";
	from node85;
	to node86;
	length 12.60;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8687;
	phases "ABCN";
	from node86;
	to node87;
	length 23.304;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8788;
	phases "ABCN";
	from node87;
	to node88;
	length 9.37;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8889;
	phases "ABCN";
	from node88;
	to node89;
	length 11.78;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8990;
	phases "ABCN";
	from node89;
	to node90;
	length 24.35;
	configuration line_config_A;
}

object overhead_line {
	name ovl_9091;
	phases "ABCN";
	from node90;
	to node91;
	length 10.406;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8182;
	phases "ABCN";
	from node81;	
	to node82;
	length 15.77;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8283;
	phases "ABCN";
	from node82;
	to node83;
	length 4.34;
	configuration line_config_A;
}

object overhead_line {
	name ovl_8384;
	phases "ABCN";
	from node83;
	to node84;
	length 9.65;
	configuration line_config_A;
}
object overhead_line {
	name ovl_8698;
	phases "ABCN";
	from node86;
	to node98;
	length 26.69;
	configuration line_config_A;
}
object overhead_line {
	name ovl_9899;
	phases "ABCN";
	from node98;
	to node99;
	length 16.52;
	configuration line_config_A;
}
object overhead_line {
	name ovl_99100;
	phases "ABCN";
	from node99;
	to node100;
	length 20.60;
	configuration line_config_A;
}

object overhead_line {
	name ovl_9092;
	phases "ABCN";
	from node90;
	to node92;
	length 21.602;
	configuration line_config_A;
}
object overhead_line {
	name ovl_9293;
	phases "ABCN";
	from node92;
	to node93;
	length 12.08;
	configuration line_config_A;
}
object overhead_line {
	name ovl_9394;
	phases "ABCN";
	from node93;
	to node94;
	length 7.785;
	configuration line_config_A;
}
object overhead_line {
	name ovl_9495;
	phases "ABCN";
	from node94;
	to node95;
	length 17.787;
	configuration line_config_A;
}

object overhead_line {
	name ovl_9596;
	phases "ABCN";
	from node95;
	to node96;
	length 22.55;
	configuration line_config_A;
}
object overhead_line {
	name ovl_9697;
	phases "ABCN";
	from node96;
	to node97;
	length 14.99;
	configuration line_config_A;
}
object overhead_line {
	name ovl_98101;
	phases "ABCN";
	from node98;
	to node101;
	length 28.698;
	configuration line_config_A;
}
object overhead_line {
	name ovl_101102;
	phases "ABCN";
	from node101;
	to node102;
	length 33.47;
	configuration line_config_A;
}


object overhead_line {
	name ovl_102103;
	phases "ABCN";
	from node102;
	to node103;
	length 42.39;
	configuration line_config_A;
}
object overhead_line {
	name ovl_103107;
	phases "ABCN";
	from node103;
	to node107;
	length 21.96;
	configuration line_config_A;
}
object overhead_line {
	name ovl_107108;
	phases "ABCN";
	from node107;
	to node108;
	length 16.489;
	configuration line_config_A;
}
object overhead_line {
	name ovl_108109;
	phases "ABCN";
	from node108;
	to node109;
	length 8.934;
	configuration line_config_A;
}


object overhead_line {
	name ovl_109110;
	phases "ABCN";
	from node109;
	to node110;
	length 14.004;
	configuration line_config_A;
}
object overhead_line {
	name ovl_110111;
	phases "ABCN";
	from node110;
	to node111;
	length 6.55;
	configuration line_config_A;
}
object overhead_line {
	name ovl_111112;
	phases "ABCN";
	from node111;
	to node112;
	length 20.264;
	configuration line_config_A;
}
object overhead_line {
	name ovl_112113;
	phases "ABCN";
	from node112;
	to node113;
	length 220.264;
	configuration line_config_A;
}
object overhead_line {
	name ovl_103104;
	phases "ABCN";
	from node103;
	to node104;
	length 27.62;
	configuration line_config_A;
}
object overhead_line {
	name ovl_104105;	
	phases "ABCN";
	from node104;
	to node105;
	length 31.001;
	configuration line_config_A;
}
object overhead_line {
	name ovl_105106;
	phases "ABCN";
	from node105;
	to node106;
	length 22.55;
	configuration line_config_A;
}

object recorder {
    parent ovl_12;
    name line_01_to_02_losses;
    property current_in_A.real,current_in_B.real,current_in_C.real,current_out_A.real,,current_out_B.real,current_out_C.real;
    flags DELTAMODE;
    interval 1;  // Record every second
    file "line_01_to_02_losses.csv";
}

object recorder {
    parent ovl_135;
    name line_01_to_35_losses;
    property current_in_A.real,current_in_B.real,current_in_C.real,current_out_A.real,,current_out_B.real,current_out_C.real;
    flags DELTAMODE;
    interval 1;  // Record every second
    file "line_01_to_35_losses.csv";
}


object recorder {
    parent ovl_0163;
    name line_01_to_63_losses;
    property current_in_A.real,current_in_B.real,current_in_C.real,current_out_A.real,,current_out_B.real,current_out_C.real;
    flags DELTAMODE;
    interval 1;  // Record every second
    file "line_01_to_63_losses.csv";
}
//==================================================================================================================================================================
//																		       Over head lines end
//===================================================================================================================================================================
